### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent values between -(2^53) + 1 and 2^53 - 1. 
"""
scalar BigInt

scalar DateTime

scalar Json

type Mutation {
  """
  개시글에 태그를 추가합니다.
   없는 태그를 입력시 생성후 게시글에 추가 합니다.
  """
  createManypost_tag_ref(post_id: String!, tags: [String]!): [post_tag_ref]

  """유저의 게시글을 만듭니다."""
  createOnepost(data: postCreateInput!): post!

  """하나의 새로운 태그를 만듭니다."""
  createOnetag(data: tagCreateInput!): tag!

  """신규 유저를 가입 시킵니다."""
  createOneuser(data: userCreateInput!): user!

  """인가 토큰을 받아 google oauth에 인증 받습니다."""
  oAuthGoogle(token: String!): Json

  """회원 가입시 id의 유효성을 검사합니다."""
  validate_id(id: String!): Json
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  """개시글을 가져옵니다."""
  post(where: postWhereUniqueInput!): post

  """모든 개시글을 가져옵니다."""
  posts(cursor: postWhereUniqueInput, orderBy: [QueryPostsOrderByInput!], skip: Int, take: Int, where: QueryPostsWhereInput): [post!]!

  """정해진 기간 동안 집계된 인기순의 개시글의 가져옵니다."""
  posts_trend(
    cursor: String

    """
    트랜드 집계 기간 : "day" | "week" | "month" | "year"
    """
    interval: String = "week"
    skip: Int
    take: Int
  ): [post]
  user(where: userWhereUniqueInput!): user
  users(cursor: userWhereUniqueInput, skip: Int, take: Int): [user!]!
}

input QueryPostsOrderByInput {
  created_at: SortOrder
}

input QueryPostsWhereInput {
  user_id: StringFilter
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type comment {
  comment: comment!
  created_at: DateTime
  id: String!
  other_comment(cursor: commentWhereUniqueInput, skip: Int, take: Int): [comment!]!
  post: post!
  reply_to: String!
  text: String!
  user: user!
}

input commentCreateManyCommentInput {
  created_at: DateTime
  id: String!
  post_id: String!
  text: String!
  user_id: String!
}

input commentCreateManyCommentInputEnvelope {
  data: [commentCreateManyCommentInput!]
  skipDuplicates: Boolean
}

input commentCreateManyPostInput {
  created_at: DateTime
  id: String!
  reply_to: String!
  text: String!
  user_id: String!
}

input commentCreateManyPostInputEnvelope {
  data: [commentCreateManyPostInput!]
  skipDuplicates: Boolean
}

input commentCreateManyUserInput {
  created_at: DateTime
  id: String!
  post_id: String!
  reply_to: String!
  text: String!
}

input commentCreateManyUserInputEnvelope {
  data: [commentCreateManyUserInput!]
  skipDuplicates: Boolean
}

input commentCreateNestedManyWithoutCommentInput {
  connect: [commentWhereUniqueInput!]
  connectOrCreate: [commentCreateOrConnectWithoutCommentInput!]
  create: [commentCreateWithoutCommentInput!]
  createMany: commentCreateManyCommentInputEnvelope
}

input commentCreateNestedManyWithoutPostInput {
  connect: [commentWhereUniqueInput!]
  connectOrCreate: [commentCreateOrConnectWithoutPostInput!]
  create: [commentCreateWithoutPostInput!]
  createMany: commentCreateManyPostInputEnvelope
}

input commentCreateNestedManyWithoutUserInput {
  connect: [commentWhereUniqueInput!]
  connectOrCreate: [commentCreateOrConnectWithoutUserInput!]
  create: [commentCreateWithoutUserInput!]
  createMany: commentCreateManyUserInputEnvelope
}

input commentCreateNestedOneWithoutOther_commentInput {
  connect: commentWhereUniqueInput
  connectOrCreate: commentCreateOrConnectWithoutOther_commentInput
  create: commentCreateWithoutOther_commentInput
}

input commentCreateOrConnectWithoutCommentInput {
  create: commentCreateWithoutCommentInput!
  where: commentWhereUniqueInput!
}

input commentCreateOrConnectWithoutOther_commentInput {
  create: commentCreateWithoutOther_commentInput!
  where: commentWhereUniqueInput!
}

input commentCreateOrConnectWithoutPostInput {
  create: commentCreateWithoutPostInput!
  where: commentWhereUniqueInput!
}

input commentCreateOrConnectWithoutUserInput {
  create: commentCreateWithoutUserInput!
  where: commentWhereUniqueInput!
}

input commentCreateWithoutCommentInput {
  created_at: DateTime
  id: String!
  other_comment: commentCreateNestedManyWithoutCommentInput
  post: postCreateNestedOneWithoutCommentInput!
  text: String!
  user: userCreateNestedOneWithoutCommentInput!
}

input commentCreateWithoutOther_commentInput {
  comment: commentCreateNestedOneWithoutOther_commentInput!
  created_at: DateTime
  id: String!
  post: postCreateNestedOneWithoutCommentInput!
  text: String!
  user: userCreateNestedOneWithoutCommentInput!
}

input commentCreateWithoutPostInput {
  comment: commentCreateNestedOneWithoutOther_commentInput!
  created_at: DateTime
  id: String!
  other_comment: commentCreateNestedManyWithoutCommentInput
  text: String!
  user: userCreateNestedOneWithoutCommentInput!
}

input commentCreateWithoutUserInput {
  comment: commentCreateNestedOneWithoutOther_commentInput!
  created_at: DateTime
  id: String!
  other_comment: commentCreateNestedManyWithoutCommentInput
  post: postCreateNestedOneWithoutCommentInput!
  text: String!
}

input commentWhereUniqueInput {
  id: String
}

type interest {
  created_at: DateTime!
  post: post!
  user: user!
}

input interestCreateManyPostInput {
  created_at: DateTime
  user_id: String!
}

input interestCreateManyPostInputEnvelope {
  data: [interestCreateManyPostInput!]
  skipDuplicates: Boolean
}

input interestCreateManyUserInput {
  created_at: DateTime
  post_id: String!
}

input interestCreateManyUserInputEnvelope {
  data: [interestCreateManyUserInput!]
  skipDuplicates: Boolean
}

input interestCreateNestedManyWithoutPostInput {
  connect: [interestWhereUniqueInput!]
  connectOrCreate: [interestCreateOrConnectWithoutPostInput!]
  create: [interestCreateWithoutPostInput!]
  createMany: interestCreateManyPostInputEnvelope
}

input interestCreateNestedManyWithoutUserInput {
  connect: [interestWhereUniqueInput!]
  connectOrCreate: [interestCreateOrConnectWithoutUserInput!]
  create: [interestCreateWithoutUserInput!]
  createMany: interestCreateManyUserInputEnvelope
}

input interestCreateOrConnectWithoutPostInput {
  create: interestCreateWithoutPostInput!
  where: interestWhereUniqueInput!
}

input interestCreateOrConnectWithoutUserInput {
  create: interestCreateWithoutUserInput!
  where: interestWhereUniqueInput!
}

input interestCreateWithoutPostInput {
  created_at: DateTime
  user: userCreateNestedOneWithoutInterestInput!
}

input interestCreateWithoutUserInput {
  created_at: DateTime
  post: postCreateNestedOneWithoutInterestInput!
}

input interestUser_idPost_idCompoundUniqueInput {
  post_id: String!
  user_id: String!
}

input interestWhereUniqueInput {
  user_id_post_id: interestUser_idPost_idCompoundUniqueInput
}

type post {
  comment(cursor: commentWhereUniqueInput, skip: Int, take: Int): [comment!]!
  comment_count: Int!
  content: String!
  created_at: DateTime!
  hidden: Boolean!
  id: String!
  interest(cursor: interestWhereUniqueInput, skip: Int, take: Int): [interest!]!
  like_count: Int!
  post_tag_ref(cursor: post_tag_refWhereUniqueInput, skip: Int, take: Int): [post_tag_ref!]!
  post_temp: post_temp
  pre_content: String!
  read(cursor: readWhereUniqueInput, skip: Int, take: Int): [read!]!
  read_count: Int!
  score: Int!
  thumbnail: String
  title: String!
  url: String!
  user: user!
  user_id: String!
}

input postCreateInput {
  comment: commentCreateNestedManyWithoutPostInput
  comment_count: Int
  content: String!
  created_at: DateTime
  hidden: Boolean
  interest: interestCreateNestedManyWithoutPostInput
  like_count: Int
  post_tag_ref: post_tag_refCreateNestedManyWithoutPostInput
  post_temp: post_tempCreateNestedOneWithoutPostInput
  pre_content: String!
  read: readCreateNestedManyWithoutPostInput
  read_count: Int
  score: Int
  thumbnail: String
  title: String!
  url: String!
}

input postCreateManyUserInput {
  comment_count: Int
  content: String!
  created_at: DateTime
  hidden: Boolean
  id: String!
  like_count: Int
  pre_content: String!
  read_count: Int
  score: Int
  thumbnail: String
  title: String!
  url: String!
}

input postCreateManyUserInputEnvelope {
  data: [postCreateManyUserInput!]
  skipDuplicates: Boolean
}

input postCreateNestedManyWithoutUserInput {
  connect: [postWhereUniqueInput!]
  connectOrCreate: [postCreateOrConnectWithoutUserInput!]
  create: [postCreateWithoutUserInput!]
  createMany: postCreateManyUserInputEnvelope
}

input postCreateNestedOneWithoutCommentInput {
  connect: postWhereUniqueInput
  connectOrCreate: postCreateOrConnectWithoutCommentInput
  create: postCreateWithoutCommentInput
}

input postCreateNestedOneWithoutInterestInput {
  connect: postWhereUniqueInput
  connectOrCreate: postCreateOrConnectWithoutInterestInput
  create: postCreateWithoutInterestInput
}

input postCreateNestedOneWithoutReadInput {
  connect: postWhereUniqueInput
  connectOrCreate: postCreateOrConnectWithoutReadInput
  create: postCreateWithoutReadInput
}

input postCreateOrConnectWithoutCommentInput {
  create: postCreateWithoutCommentInput!
  where: postWhereUniqueInput!
}

input postCreateOrConnectWithoutInterestInput {
  create: postCreateWithoutInterestInput!
  where: postWhereUniqueInput!
}

input postCreateOrConnectWithoutReadInput {
  create: postCreateWithoutReadInput!
  where: postWhereUniqueInput!
}

input postCreateOrConnectWithoutUserInput {
  create: postCreateWithoutUserInput!
  where: postWhereUniqueInput!
}

input postCreateWithoutCommentInput {
  comment_count: Int
  content: String!
  created_at: DateTime
  hidden: Boolean
  id: String!
  interest: interestCreateNestedManyWithoutPostInput
  like_count: Int
  post_tag_ref: post_tag_refCreateNestedManyWithoutPostInput
  post_temp: post_tempCreateNestedOneWithoutPostInput
  pre_content: String!
  read: readCreateNestedManyWithoutPostInput
  read_count: Int
  score: Int
  thumbnail: String
  title: String!
  url: String!
  user: userCreateNestedOneWithoutPostInput!
}

input postCreateWithoutInterestInput {
  comment: commentCreateNestedManyWithoutPostInput
  comment_count: Int
  content: String!
  created_at: DateTime
  hidden: Boolean
  id: String!
  like_count: Int
  post_tag_ref: post_tag_refCreateNestedManyWithoutPostInput
  post_temp: post_tempCreateNestedOneWithoutPostInput
  pre_content: String!
  read: readCreateNestedManyWithoutPostInput
  read_count: Int
  score: Int
  thumbnail: String
  title: String!
  url: String!
  user: userCreateNestedOneWithoutPostInput!
}

input postCreateWithoutReadInput {
  comment: commentCreateNestedManyWithoutPostInput
  comment_count: Int
  content: String!
  created_at: DateTime
  hidden: Boolean
  id: String!
  interest: interestCreateNestedManyWithoutPostInput
  like_count: Int
  post_tag_ref: post_tag_refCreateNestedManyWithoutPostInput
  post_temp: post_tempCreateNestedOneWithoutPostInput
  pre_content: String!
  read_count: Int
  score: Int
  thumbnail: String
  title: String!
  url: String!
  user: userCreateNestedOneWithoutPostInput!
}

input postCreateWithoutUserInput {
  comment: commentCreateNestedManyWithoutPostInput
  comment_count: Int
  content: String!
  created_at: DateTime
  hidden: Boolean
  id: String!
  interest: interestCreateNestedManyWithoutPostInput
  like_count: Int
  post_tag_ref: post_tag_refCreateNestedManyWithoutPostInput
  post_temp: post_tempCreateNestedOneWithoutPostInput
  pre_content: String!
  read: readCreateNestedManyWithoutPostInput
  read_count: Int
  score: Int
  thumbnail: String
  title: String!
  url: String!
}

input postWhereUniqueInput {
  id: String
}

type post_group {
  created_at: DateTime!
  id: String!
  name: String!
  priority: Json
  user: user!
}

input post_groupCreateManyUserInput {
  created_at: DateTime
  id: String!
  name: String!
  priority: Json
}

input post_groupCreateManyUserInputEnvelope {
  data: [post_groupCreateManyUserInput!]
  skipDuplicates: Boolean
}

input post_groupCreateNestedManyWithoutUserInput {
  connect: [post_groupWhereUniqueInput!]
  connectOrCreate: [post_groupCreateOrConnectWithoutUserInput!]
  create: [post_groupCreateWithoutUserInput!]
  createMany: post_groupCreateManyUserInputEnvelope
}

input post_groupCreateOrConnectWithoutUserInput {
  create: post_groupCreateWithoutUserInput!
  where: post_groupWhereUniqueInput!
}

input post_groupCreateWithoutUserInput {
  created_at: DateTime
  id: String!
  name: String!
  priority: Json
}

input post_groupWhereUniqueInput {
  id: String
}

type post_tag_ref {
  post: post!
  tag: tag!
}

input post_tag_refCreateManyPostInput {
  created_at: DateTime
  tag_name: String!
}

input post_tag_refCreateManyPostInputEnvelope {
  data: [post_tag_refCreateManyPostInput!]
  skipDuplicates: Boolean
}

input post_tag_refCreateNestedManyWithoutPostInput {
  connect: [post_tag_refWhereUniqueInput!]
  connectOrCreate: [post_tag_refCreateOrConnectWithoutPostInput!]
  create: [post_tag_refCreateWithoutPostInput!]
  createMany: post_tag_refCreateManyPostInputEnvelope
}

input post_tag_refCreateOrConnectWithoutPostInput {
  create: post_tag_refCreateWithoutPostInput!
  where: post_tag_refWhereUniqueInput!
}

input post_tag_refCreateWithoutPostInput {
  created_at: DateTime
  tag: tagCreateNestedOneWithoutPost_tag_refInput!
}

input post_tag_refTag_namePost_idCompoundUniqueInput {
  post_id: String!
  tag_name: String!
}

input post_tag_refWhereUniqueInput {
  tag_name_post_id: post_tag_refTag_namePost_idCompoundUniqueInput
}

type post_temp {
  content: String
  post: post!
  post_id: String!
  title: String
}

input post_tempCreateNestedOneWithoutPostInput {
  connect: post_tempWhereUniqueInput
  connectOrCreate: post_tempCreateOrConnectWithoutPostInput
  create: post_tempCreateWithoutPostInput
}

input post_tempCreateOrConnectWithoutPostInput {
  create: post_tempCreateWithoutPostInput!
  where: post_tempWhereUniqueInput!
}

input post_tempCreateWithoutPostInput {
  content: String
  title: String
}

input post_tempWhereUniqueInput {
  post_id: String
}

type read {
  created_at: DateTime!
  post: post!
  user: user!
}

input readCreateManyPostInput {
  created_at: DateTime
  user_id: String!
}

input readCreateManyPostInputEnvelope {
  data: [readCreateManyPostInput!]
  skipDuplicates: Boolean
}

input readCreateManyUserInput {
  created_at: DateTime
  post_id: String!
}

input readCreateManyUserInputEnvelope {
  data: [readCreateManyUserInput!]
  skipDuplicates: Boolean
}

input readCreateNestedManyWithoutPostInput {
  connect: [readWhereUniqueInput!]
  connectOrCreate: [readCreateOrConnectWithoutPostInput!]
  create: [readCreateWithoutPostInput!]
  createMany: readCreateManyPostInputEnvelope
}

input readCreateNestedManyWithoutUserInput {
  connect: [readWhereUniqueInput!]
  connectOrCreate: [readCreateOrConnectWithoutUserInput!]
  create: [readCreateWithoutUserInput!]
  createMany: readCreateManyUserInputEnvelope
}

input readCreateOrConnectWithoutPostInput {
  create: readCreateWithoutPostInput!
  where: readWhereUniqueInput!
}

input readCreateOrConnectWithoutUserInput {
  create: readCreateWithoutUserInput!
  where: readWhereUniqueInput!
}

input readCreateWithoutPostInput {
  created_at: DateTime
  user: userCreateNestedOneWithoutReadInput!
}

input readCreateWithoutUserInput {
  created_at: DateTime
  post: postCreateNestedOneWithoutReadInput!
}

input readUser_idPost_idCompoundUniqueInput {
  post_id: String!
  user_id: String!
}

input readWhereUniqueInput {
  user_id_post_id: readUser_idPost_idCompoundUniqueInput
}

type tag {
  created_at: DateTime!
  name: String!
  post_tag_ref(cursor: post_tag_refWhereUniqueInput, skip: Int, take: Int): [post_tag_ref!]!
}

input tagCreateInput {
  name: String!
}

input tagCreateNestedOneWithoutPost_tag_refInput {
  connect: tagWhereUniqueInput
  connectOrCreate: tagCreateOrConnectWithoutPost_tag_refInput
  create: tagCreateWithoutPost_tag_refInput
}

input tagCreateOrConnectWithoutPost_tag_refInput {
  create: tagCreateWithoutPost_tag_refInput!
  where: tagWhereUniqueInput!
}

input tagCreateWithoutPost_tag_refInput {
  created_at: DateTime
  name: String!
}

input tagWhereUniqueInput {
  name: String
}

type user {
  email: String!
  id: String!
  image: String
  introduction: String
  social: Json
  token: String
  velog_name: String!
}

input userCreateInput {
  comment: commentCreateNestedManyWithoutUserInput
  email: String!
  id: String!
  image: String
  interest: interestCreateNestedManyWithoutUserInput
  introduction: String
  password: String
  post: postCreateNestedManyWithoutUserInput
  post_group: post_groupCreateNestedManyWithoutUserInput
  read: readCreateNestedManyWithoutUserInput
  social: Json
}

input userCreateNestedOneWithoutCommentInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutCommentInput
  create: userCreateWithoutCommentInput
}

input userCreateNestedOneWithoutInterestInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutInterestInput
  create: userCreateWithoutInterestInput
}

input userCreateNestedOneWithoutPostInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutPostInput
  create: userCreateWithoutPostInput
}

input userCreateNestedOneWithoutReadInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutReadInput
  create: userCreateWithoutReadInput
}

input userCreateOrConnectWithoutCommentInput {
  create: userCreateWithoutCommentInput!
  where: userWhereUniqueInput!
}

input userCreateOrConnectWithoutInterestInput {
  create: userCreateWithoutInterestInput!
  where: userWhereUniqueInput!
}

input userCreateOrConnectWithoutPostInput {
  create: userCreateWithoutPostInput!
  where: userWhereUniqueInput!
}

input userCreateOrConnectWithoutReadInput {
  create: userCreateWithoutReadInput!
  where: userWhereUniqueInput!
}

input userCreateWithoutCommentInput {
  email: String!
  id: String!
  image: String
  interest: interestCreateNestedManyWithoutUserInput
  introduction: String
  password: String
  post: postCreateNestedManyWithoutUserInput
  post_group: post_groupCreateNestedManyWithoutUserInput
  read: readCreateNestedManyWithoutUserInput
  social: Json
  velog_name: String!
}

input userCreateWithoutInterestInput {
  comment: commentCreateNestedManyWithoutUserInput
  email: String!
  id: String!
  image: String
  introduction: String
  password: String
  post: postCreateNestedManyWithoutUserInput
  post_group: post_groupCreateNestedManyWithoutUserInput
  read: readCreateNestedManyWithoutUserInput
  social: Json
  velog_name: String!
}

input userCreateWithoutPostInput {
  comment: commentCreateNestedManyWithoutUserInput
  email: String!
  id: String!
  image: String
  interest: interestCreateNestedManyWithoutUserInput
  introduction: String
  password: String
  post_group: post_groupCreateNestedManyWithoutUserInput
  read: readCreateNestedManyWithoutUserInput
  social: Json
  velog_name: String!
}

input userCreateWithoutReadInput {
  comment: commentCreateNestedManyWithoutUserInput
  email: String!
  id: String!
  image: String
  interest: interestCreateNestedManyWithoutUserInput
  introduction: String
  password: String
  post: postCreateNestedManyWithoutUserInput
  post_group: post_groupCreateNestedManyWithoutUserInput
  social: Json
  velog_name: String!
}

input userWhereUniqueInput {
  email: String
  id: String
}
